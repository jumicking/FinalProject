/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package malilong.pkgfinal.project;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;

public class BookInvetory extends javax.swing.JFrame {

    DefaultTableModel model;
    TableRowSorter<DefaultTableModel> sorter;
    

    public BookInvetory() {
        initComponents();
        SearchButton.setText("Search");
        model = (DefaultTableModel) Inventory.getModel();
        sorter = new TableRowSorter<>(model);
        Inventory.setRowSorter(sorter);
        model.setRowCount(0);
        LoadTable();
      
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
      
    }

    void LoadTable() {

        model.setRowCount(0);
        DBconnection.init();
        Connection c = DBconnection.getConnection();

        try {
            PreparedStatement ps = c.prepareStatement("SELECT * FROM inventory");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {

                model.addRow(new Object[]{rs.getString("bookreference"), rs.getString("bookname"), rs.getString("totalbooks"), rs.getString("borrowed"), rs.getString("idbook")});

            }

        } catch (SQLException ex) {
            Logger.getLogger(BookInvetory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void AddBook(String BookRef, String BookName, int BookNumb) {
         try {
        DBconnection.init();
        Connection c = DBconnection.getConnection();

        PreparedStatement ps = c.prepareStatement("SELECT * FROM inventory WHERE bookreference = ?");
        ps.setString(1, BookRef);
        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            JOptionPane.showMessageDialog(null, "Book reference already exists! Please choose another one.");
            return;
        }

        ps = c.prepareStatement("INSERT INTO inventory (bookreference, bookname, totalbooks) VALUES (?, ?, ?)");
        ps.setString(1, BookRef);
        ps.setString(2, BookName);
        ps.setInt(3, BookNumb);
        ps.execute();

        JOptionPane.showMessageDialog(null, "Data Successfully Saved");
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error: " + ex);
    }
    }

    void UpdateBook(String BookRef, String BookName, int BookNumb, int Id) {
        DBconnection.init();
        Connection c = DBconnection.getConnection();
        try {
            PreparedStatement ps = c.prepareStatement("UPDATE inventory set bookreference = ?, bookname = ?,  totalbooks = ? WHERE idbook = ?;");
            ps.setString(1, BookRef);
            ps.setString(2, BookName);
            ps.setInt(3, BookNumb);
            ps.setInt(4, Id);
            int rowsUpdated = ps.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Record updated successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "No record found.");
            }

        } catch (SQLException ex) {
            Logger.getLogger(BookInvetory.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error: " + ex);
        }

    }

    void DeleteBook(String BookRef) {
        DBconnection.init();
        Connection c = DBconnection.getConnection();
        try {
            PreparedStatement ps = c.prepareStatement("DELETE FROM inventory WHERE bookreference = ?");
            ps.setString(1, BookRef);
            int rowsDeleted = ps.executeUpdate();
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(null, "Record deleted successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "No record found.");
            }

        } catch (SQLException ex) {
            Logger.getLogger(BookInvetory.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error: " + ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Inventory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Selections = new javax.swing.JComboBox<>();
        BookReference = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        BookTitle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        BookNumbers = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        InventoryID = new javax.swing.JTextField();
        SearchBar = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(910, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Reference", "Title", "# of Books", "Borrowed", "Inventory ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Inventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InventoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Inventory);
        if (Inventory.getColumnModel().getColumnCount() > 0) {
            Inventory.getColumnModel().getColumn(0).setResizable(false);
            Inventory.getColumnModel().getColumn(1).setResizable(false);
            Inventory.getColumnModel().getColumn(2).setResizable(false);
            Inventory.getColumnModel().getColumn(3).setResizable(false);
            Inventory.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 130, 490, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Book Inventory");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 360, -1, -1));

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 80, -1, -1));

        Selections.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add", "Update", "Delete" }));
        getContentPane().add(Selections, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 80, -1, -1));
        getContentPane().add(BookReference, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 130, 240, -1));

        jLabel2.setText("Reference");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, -1, -1));

        jLabel3.setText("Title");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 170, -1, -1));
        getContentPane().add(BookTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 190, 240, -1));

        jLabel4.setText("Total Number of Books");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 230, -1, -1));
        getContentPane().add(BookNumbers, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 250, 240, -1));

        jLabel5.setText("Inventory ID");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 290, -1, -1));
        getContentPane().add(InventoryID, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 310, 240, -1));

        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });
        getContentPane().add(SearchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 330, -1));

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, -1, -1));

        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ClearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 90, 70, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Librarian open = new Librarian();
        open.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String selecteditem = Selections.getSelectedItem().toString();
    String Bookref = BookReference.getText().trim();
    String Title = BookTitle.getText().trim();
    String idText = InventoryID.getText().trim();
    String numbersText = BookNumbers.getText().trim();

    if (Bookref.isEmpty() || Title.isEmpty() || numbersText.isEmpty()
            || (selecteditem.equals("Update") && idText.isEmpty())) {
        JOptionPane.showMessageDialog(null, "Please fill out all required fields.");
        return;
    } else {
        try {
            int Numbers = Integer.parseInt(numbersText);
            int IId = idText.isEmpty() ? 0 : Integer.parseInt(idText);

            switch (selecteditem) {
                case "Add":
                    AddBook(Bookref, Title, Numbers);
                    clearFields();
                    break;
                case "Update":
                    UpdateBook(Bookref, Title, Numbers, IId);
                    clearFields();
                    break;
                case "Delete":
                    int confirm = JOptionPane.showConfirmDialog(null,
                            "Are you sure you want to delete this book?",
                            "Confirm Delete", JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        DeleteBook(Bookref);
                        clearFields();
                    }
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Invalid operation selected.");
            }

            LoadTable(); // Refresh the table after any operation

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid numbers for ID and Book Count.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unexpected error: " + e.getMessage());
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void InventoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InventoryMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                int selected = Inventory.getSelectedRow();
                if (selected != -1) {
                    String getref = Inventory.getValueAt(selected, 0).toString();
                    String getTitle = Inventory.getValueAt(selected, 1).toString();
                    String getNumb = String.valueOf(Inventory.getValueAt(selected, 2));
                    String getId = String.valueOf(Inventory.getValueAt(selected, 4));

                    BookReference.setText(getref);
                    BookTitle.setText(getTitle);
                    BookNumbers.setText(getNumb);
                    InventoryID.setText(getId);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error loading selected book: " + e.getMessage());
        }
    }//GEN-LAST:event_InventoryMouseClicked

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        
    }//GEN-LAST:event_SearchBarActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed

        String query = SearchBar.getText().trim();

        if (query.isEmpty()) {
            sorter.setRowFilter(null); // show all rows if query is empty
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + query));
        }

    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        
        clearFields();                    // Clear all text fields
        SearchBar.setText("");            // Clear the search bar
        sorter.setRowFilter(null);       // Remove any active filters
        LoadTable();                     // Reload full inventory table
        
    }//GEN-LAST:event_ClearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookInvetory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookInvetory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookInvetory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookInvetory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookInvetory().setVisible(true);
            }
        });
    }
    
    private void clearFields() {
    BookReference.setText("");
    BookTitle.setText("");
    InventoryID.setText("");
    BookNumbers.setText("");
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BookNumbers;
    private javax.swing.JTextField BookReference;
    private javax.swing.JTextField BookTitle;
    private javax.swing.JButton ClearButton;
    private javax.swing.JTable Inventory;
    private javax.swing.JTextField InventoryID;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JButton SearchButton;
    private javax.swing.JComboBox<String> Selections;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
}
